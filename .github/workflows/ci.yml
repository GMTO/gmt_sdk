name: CI

on:
    workflow_dispatch:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    schedule:
        - cron: '0 7 * * *'

jobs:
  build:
    runs-on: self-hosted
    container:
        image: ghcr.io/gmto/gmt-os-dev:latest
    outputs:
        sdk: ${{ steps.sdk_version.outputs.sdk }}
    steps:
        - name: Clone dev_fwk
          uses: actions/checkout@v4
          with:
            repository: GMTO/ocs_dev_fwk
            ref: master
            token: ${{secrets.GH_PAT}}
            path: ocs_dev_fwk
        - name: Install dev_fwk
          uses: ./ocs_dev_fwk/etc/ci/actions/setup-gmt
          with:
            token: ${{secrets.GH_PAT}}
        - name: SDK version
          id: sdk_version
          run: |
            sdk=gmt-sdk-$(date -u +"%Y%m%d-%H%M%S").tar.gz
            echo sdk="$sdk" >> $GITHUB_OUTPUT
        - name: Build SDK components
          id: build_sdk
          run: |
            echo "::group::setup gds"
            source /root/.bashrc
            echo "::endgroup::"

            echo "::group::gds clone"
            gds clone --bundle ocs_sdk_bundle
            echo "::endgroup::"

            echo "::group::gds build"
            gds build --bundle ocs_sdk_bundle
            echo "::endgroup::"

            echo "::group::gds install"
            gds install --bundle ocs_sdk_bundle
            echo "::endgroup::"

            echo "::group::grs compile"
            grs compile core_fwk
            grs compile ctrl_fwk
            grs compile dp_fwk
            grs compile io_fwk
            grs compile pers_fwk
            grs compile ui_fwk
            grs compile log_sys
            grs compile alarm_sys
            grs compile tele_sys
            grs compile conf_sys
            grs compile sup_sys
            grs compile data_sys
            grs compile app_sys
            grs compile seq_sys
            echo "::endgroup::"

            echo "::group::gds test"
            # gds test --bundle ocs_sdk_bundle
            echo "::endgroup::"
        - name: Collect Hashes
          run: |
            echo "::group::collect hashes"
            cd /opt/gmt/modules
            for repo in *
            do
              cd $repo
              echo -n "$repo: "
              git rev-parse --short HEAD
              cd ..
            done >> /opt/gmt/etc/GIT_MANIFEST.txt
            cat /opt/gmt/etc/GIT_MANIFEST.txt
            echo "::endgroup::"
        - name: Collect version files
          run: |
              echo "::group::collect version files"
              cp /root/rt_version.txt /opt/gmt/etc/rt_version.txt
              cp /root/python_version.txt /opt/gmt/etc/python_version.txt
              cat /opt/gmt/etc/rt_version.txt
              cat /opt/gmt/etc/python_version.txt
              echo "::endgroup::"
        - name: Packaging
          run: |
            echo "::group::packaging"

            rm -rf /opt/gmt/modules
            rm -rf /opt/gmt/python_modules

            mkdir /opt/gmt/modules
            /opt/gmt/ext/bin/python -m venv /opt/gmt/python_modules --prompt gmt

            tar zcvf /tmp/${{ steps.sdk_version.outputs.sdk }} --exclude ./node_modules --exclude ./package-lock.json -C /opt/gmt .
            echo "::endgroup::"
        - name: Upload SDK artifact
          uses: actions/upload-artifact@v4
          with:
              name: ${{ steps.sdk_version.outputs.sdk }}
              path: /tmp/${{ steps.sdk_version.outputs.sdk }}
              retention-days: 5

  test:
    runs-on: ubuntu-22.04
    needs: build
    container:
        image: ghcr.io/gmto/gmt-os:latest
    steps:
        - name: Download SDK artifact
          uses: actions/download-artifact@v4
          with:
              name: ${{ needs.build.outputs.sdk }}
              path: /tmp/sdk

        - name: Extract SDK artifact
          if: false
          run: |
            echo "::group::extract"
            mkdir -p /opt/gmt
            tar zxvf /tmp/sdk/${{ needs.build.outputs.sdk }} -C /opt/gmt
            echo "::endgroup::"

        - name: Install SDK
          run: |
            export GMT_GLOBAL=/opt/gmt
            export GMT_LOCAL=/opt/gmt
            source $GMT_GLOBAL/bin/gmt_env.sh

            cd /opt/gmt
            npm install --no-audit --progress=false
            pip install -r requirements.txt -r requirements-dev.txt

        - name: Run tests
          run: |
            echo "::group::run tests"
            export GMT_GLOBAL=/opt/gmt
            export GMT_LOCAL=/opt/gmt
            source /opt/gmt/bin/gmt_env.sh

            gds --version
            gds env
            gds info
            echo "::endgroup::"
